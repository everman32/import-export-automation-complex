package by.victory.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StatementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementAllPropertiesEquals(Statement expected, Statement actual) {
        assertStatementAutoGeneratedPropertiesEquals(expected, actual);
        assertStatementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementAllUpdatablePropertiesEquals(Statement expected, Statement actual) {
        assertStatementUpdatableFieldsEquals(expected, actual);
        assertStatementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementAutoGeneratedPropertiesEquals(Statement expected, Statement actual) {
        assertThat(expected)
            .as("Verify Statement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementUpdatableFieldsEquals(Statement expected, Statement actual) {
        assertThat(expected)
            .as("Verify Statement relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getTransportTariff()).as("check transportTariff").isEqualTo(actual.getTransportTariff()))
            .satisfies(e -> assertThat(e.getDeliveryScope()).as("check deliveryScope").isEqualTo(actual.getDeliveryScope()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementUpdatableRelationshipsEquals(Statement expected, Statement actual) {
        assertThat(expected)
            .as("Verify Statement relationships")
            .satisfies(e -> assertThat(e.getStatementType()).as("check statementType").isEqualTo(actual.getStatementType()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getPositioning()).as("check positioning").isEqualTo(actual.getPositioning()))
            .satisfies(e -> assertThat(e.getTrip()).as("check trip").isEqualTo(actual.getTrip()));
    }
}
