package by.victory.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TripAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAllPropertiesEquals(Trip expected, Trip actual) {
        assertTripAutoGeneratedPropertiesEquals(expected, actual);
        assertTripAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAllUpdatablePropertiesEquals(Trip expected, Trip actual) {
        assertTripUpdatableFieldsEquals(expected, actual);
        assertTripUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAutoGeneratedPropertiesEquals(Trip expected, Trip actual) {
        assertThat(expected)
            .as("Verify Trip auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripUpdatableFieldsEquals(Trip expected, Trip actual) {
        assertThat(expected)
            .as("Verify Trip relevant properties")
            .satisfies(e -> assertThat(e.getAuthorizedCapital()).as("check authorizedCapital").isEqualTo(actual.getAuthorizedCapital()))
            .satisfies(e -> assertThat(e.getThreshold()).as("check threshold").isEqualTo(actual.getThreshold()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripUpdatableRelationshipsEquals(Trip expected, Trip actual) {
        assertThat(expected)
            .as("Verify Trip relationships")
            .satisfies(e -> assertThat(e.getTransport()).as("check transport").isEqualTo(actual.getTransport()))
            .satisfies(e -> assertThat(e.getDriver()).as("check driver").isEqualTo(actual.getDriver()))
            .satisfies(e -> assertThat(e.getHubPositioning()).as("check hubPositioning").isEqualTo(actual.getHubPositioning()));
    }
}
